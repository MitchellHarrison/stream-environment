version: "3.9"
services:
    twitch_chatbot:
        container_name: ${TWITCH_BOT}
        build: 
            context: ./twitch-chatbot
        networks: 
            stream-net:
                aliases:
                    - ${TWITCH_BOT}
        environment:
            - IRC_PORT=${IRC_PORT}
            - ZMQ_PORT=${ZMQ_PORT}
            - TWITCH_IN_TOPIC=${TWITCH_IN_TOPIC}
            - TWITCH_OUT_TOPIC=${TWITCH_OUT_TOPIC}
            - OUTPUT_HANDLER=${CHAT_OUT_HANDLER}
        env_file: ./twitch-chatbot/credentials.env
        ports: 
            - "${IRC_PORT}:${IRC_PORT}"
        depends_on:
            - chat_input_handler

    youtube_chatbot:
        container_name: ${YOUTUBE_BOT}
        build:
            context: ./youtube-chatbot
        networks:
            stream-net:
                aliases:
                    - ${YOUTUBE_BOT}
        env_file: .env
        ports:
            - "${YOUTUBE_BOT_PORT}:${YOUTUBE_BOT_PORT}"
        depends_on:
            - chat_input_handler

    chat_input_handler:
        container_name: ${CHAT_IN_HANDLER}
        build: 
            context: ./chat-input-handler
        env_file: .env
        networks: 
            stream-net:
                aliases:
                    - ${CHAT_IN_HANDLER}
        restart: on-failure
        ports:
            - "443"
        depends_on:
            - backend

    chat_output_handler:
        container_name: ${CHAT_OUT_HANDLER}
        build:
            context: ./chat-output-handler
        env_file: .env
        networks:
            stream-net:
                aliases:
                    - ${CHAT_OUT_HANDLER}
        restart: on-failure
        depends_on:
            - backend

    backend:
        container_name: ${BACKEND}
        build:
            context: ./backend
        env_file: .env
        ports:
            - "${BACKEND_PORT}:${BACKEND_PORT}"            
        restart: on-failure
        networks:
            stream-net:
                aliases:
                    - ${BACKEND}
        depends_on:
            - db_api

    db_api:
        container_name: ${DB_API}
        build:
            context: ./db-api
        env_file: .env
        restart: on-failure
        ports:
            - "${DB_API_PORT}:${DB_API_PORT}"
        networks:
            stream-net:
                aliases:
                    - ${DB_API}
        depends_on:
            db:
                condition: service_healthy

    db:
        container_name: ${DATABASE}
        image: postgres
        environment:
            - POSTGRES_USER=${PSQL_USER} 
            - POSTGRES_PASSWORD=${PSQL_PASS}
            - POSTGRES_DB=${DB_NAME}
        ports:
            - "${PSQL_PORT}:${PSQL_PORT}"
        networks:
            stream-net:
                aliases:
                    - ${DATABASE}
        healthcheck:
            test: ["CMD", "psql", "-U", "${PSQL_USER}"]
            interval: 2s
            timeout: 2s
        volumes:
            - postgres_data:/var/lib/postgresql/data/

volumes:
    postgres_data:

networks:
    stream-net:
        driver: bridge
        name: stream-net
